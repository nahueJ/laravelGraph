(function () {
	var request = require ('request');
	function ubiquiti_info (http_base, user, password, callback) {
		var jar = request.jar ();
		var use_https = false;
		request.get ({
			url: http_base + '/',
			followRedirect: function (response) {
				// si pasamos de http a https, tenerlo en cuenta para las próximas peticiones... :-)
				if (response.headers.location.substr (0, 8) == 'https://' && http_base.substr (0, 8) != 'https://') {
					http_base = 'https://' + http_base.split ('//').slice (1).join ('//');
				}
				return true;
			},
			followAllRedirects: true,
			rejectUnauthorized: false,
			jar: jar,
			timeout: 10000,
			forever: true,
		}, function (err, response, body) {
			if (err) {
				callback (err);
				return;
			}
			if (response.statusCode != 200) {
				console.log ('Falló la obtención de cookie');
				console.log (response.statusCode);
				console.log (response.headers);
				callback (new Error ('Falló la obtención de cookie'));
				return;
			}
			request.post ({
				url: http_base + '/login.cgi?uri=/status.cgi',
				formData: {
					username: user,
					password: password
				},
				followAllRedirects: true,
				rejectUnauthorized: false,
				jar: jar,
				json: true,
				timeout: 10000,
				forever: true,
			}, function (err, response, body) {
				if (err) {
					callback (err);
					return;
				}
				if (response.statusCode != 200) {
					console.log ('Falló el inicio de sesión / obtención de status.cgi');
					console.log (response.statusCode);
					console.log (response.headers);
					callback (new Error ('Falló el inicio de sesión / obtención de status.cgi'));
					return;
				}
				var status = body;
				var sta, iflist, done;
				function finish (err) {
					if (err) {
						if (done) {
							return;
						}
						done = true;
						callback (err);
						return;
					}
					if (typeof sta != 'undefined' && typeof iflist != 'undefined') {
						if (done) {
							return;
						}
						done = true;
						var result = {
							status: status
						};
						if (sta) {
							result.sta = sta;
						}
						if (iflist) {
							result.iflist = iflist;
						}
						callback (null, result);
					}
				}
				request.get ({
					url: http_base + '/sta.cgi',
					followAllRedirects: true,
					rejectUnauthorized: false,
					jar: jar,
					json: true,
					timeout: 10000,
					forever: true,
				}, function (err, response, body) {
					if (err) {
						finish (err);
						return;
					}
					if (response.statusCode != 200) {
						console.log ('Falló la obtención de sta.cgi');
						console.log (response.statusCode);
						console.log (response.headers);
						finish (new Error ('Falló la obtención de sta.cgi'));
						return;
					}
					sta = body;
					finish ();
				});
				if (status.host && status.host.fwversion && status.host.fwversion.substr (0, 3) == 'v8.') {
					iflist = false;
					finish ();
				} else {
					request.get ({
						url: http_base + '/iflist.cgi',
						followAllRedirects: true,
						rejectUnauthorized: false,
						jar: jar,
						json: true,
						forever: true,
					}, function (err, response, body) {
						if (err) {
							finish (err);
							return;
						}
						if (response.statusCode != 200) {
							console.log ('Falló la obtención de iflist.cgi');
							console.log (response.statusCode);
							console.log (response.headers);
							finish (new Error ('Falló la obtención de iflist.cgi'));
							return;
						}
						iflist = body;
						if (iflist.interfaces) {
							for (var i in iflist.interfaces) {
								delete iflist.interfaces[i].wireless;
							}
						}
						finish ();
					});
				}
			});
		});
	}
	
	module.exports = ubiquiti_info;
}) ();
